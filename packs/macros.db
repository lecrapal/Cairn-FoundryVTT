{"name":"Generate Character","type":"script","author":"Vw4BPOEKqYJ80wk3","img":"systems/cairn/tokens/extra/gold-piece.webp","scope":"global","command":"const rollTableInventory = [\n  // Armor\n  {\n    rolltable: { compendium: 'cairn.gear-tables', table: 'Armor', withSubTable: false },\n    item: { compendiums: ['cairn.armor'] }\n  },\n  // Weapons\n  {\n    rolltable: { compendium: 'cairn.gear-tables', table: 'Weapons', withSubTable: true },\n    item: { compendiums: ['cairn.weapons'] }\n  },\n  // Helmets & Shields\n  {\n    rolltable: { compendium: 'cairn.gear-tables', table: 'Helmets and Shields', withSubTable: false },\n    item: { compendiums: ['cairn.armor'] }\n  },\n  // Expeditionary Gear\n  {\n    rolltable: { compendium: 'cairn.gear-tables', table: 'Expeditionary Gear', withSubTable: false },\n    item: { compendiums: ['cairn.expeditionary-gear', 'cairn.containers'] }\n  },\n  // Tools\n  {\n    rolltable: { compendium: 'cairn.gear-tables', table: 'Tools', withSubTable: false },\n    item: { compendiums: ['cairn.tools'] }\n  },\n  // Trinkets\n  {\n    rolltable: { compendium: 'cairn.gear-tables', table: 'Trinkets', withSubTable: false },\n    item: { compendiums: ['cairn.trinkets'] }\n  },\n  // Bonus Item\n  {\n    rolltable: { compendium: 'cairn.gear-tables', table: 'Bonus Item', withSubTable: true },\n    item: {\n      compendiums: ['cairn.expeditionary-gear', 'cairn.armor', 'cairn.weapons',\n        'cairn.tools', 'cairn.trinkets', 'cairn.spellbooks', 'cairn.containers']\n    }\n  }\n]\n\n/**\n * Retrieve rolled items\n * @param rollItems\n * @param actorData\n * @returns {Promise<{actors: *[], items: *[]}>}\n */\nasync function rollInventory (rollItems, actorData) {\n  const results = { items: [], actors: [] }\n\n  for (const rollItem of rollItems) {\n    const tableResults = await getCompendiumTableAndRoll(rollItem.rolltable.compendium, rollItem.rolltable.table)\n    for (const tableResult of tableResults) {\n      // Result is a link to a subtable\n      if (rollItem.rolltable.withSubTable) {\n        const subTableResults = await getCompendiumTableAndRoll(rollItem.rolltable.compendium, tableResult.text)\n        for (const subTableResult of subTableResults) {\n          // Not an item\n          if (subTableResult.documentId !== null) {\n            const document = await findCompendiumDocument(rollItem.item.compendiums, subTableResult.text)\n            const convertedDoc = convertDocumentForImport(document, actorData.name)\n            if (convertedDoc.type === 'item') {\n              results.items.push(convertedDoc.document)\n            }\n            if (convertedDoc.type === 'actor') {\n              results.actors.push(convertedDoc.document)\n            }\n          }\n        }\n      } else {\n        const document = await findCompendiumDocument(rollItem.item.compendiums, tableResult.text)\n        const convertedDoc = convertDocumentForImport(document, actorData.name)\n        if (convertedDoc.type === 'item') {\n          results.items.push(convertedDoc.document)\n        }\n        if (convertedDoc.type === 'actor') {\n          results.actors.push(convertedDoc.document)\n        }\n      }\n    }\n  }\n  return results\n}\n\n/**\n * Convert document before import, to rename actor's container for ex.\n * @param document\n * @param characterName\n * @returns {{document, type: string}|{document: string | (() => Promise<string>) | (() => string), type: string}|{document: *, type: string}}\n */\nfunction convertDocumentForImport (document, characterName) {\n  if (document?.constructor?.name === 'Item') {\n    return { document: document.toObject(), type: 'item' }\n  }\n  if (document?.constructor?.name === 'CairnActor') {\n    // Change name\n    const actor = document.toObject()\n    actor.name = game.i18n.format('CAIRN.OwnersItem', { owner: characterName, actor: actor.name })\n    return { document: actor, type: 'actor' }\n  }\n  return { document: document, type: 'none' }\n}\n\n/**\n * Get name or original name of a document to make the macro usable with babele\n * @param document\n * @returns {string}\n */\nfunction getOriginalName (document) {\n  return (document.originalName !== undefined) ? document.originalName : document.name\n}\n\n/**\n * Try to find the document (item, actor, etc.) in a list of compendiums, or return null\n * @param compendiums\n * @param documentName\n * @returns {Promise<null|*>}\n */\nasync function findCompendiumDocument (compendiums, documentName) {\n  for (const compendium of compendiums) {\n    const pack = game.packs.get(compendium)\n    const entry = pack.index.find(e => getOriginalName(e) === documentName)\n    if (typeof entry !== 'undefined') {\n      return await pack.getDocument(entry._id)\n    }\n  }\n  return null\n}\n\n/**\n * Find a compendium rolltable and roll it !\n * @param compendium\n * @param tableName\n * @returns {Promise<*>}\n */\nasync function getCompendiumTableAndRoll (compendium, tableName) {\n  const pack = game.packs.get(compendium)\n  const entry = pack.index.find(e => getOriginalName(e) === tableName)\n  return await pack.getDocument(entry._id).then(table => table.draw()).then(result => result.results)\n}\n\n// Used to get strength, dexterity and will\nfunction totalDiceTermResults (diceTermResults) {\n  return diceTermResults.reduce((total, diceTermResult) => total + diceTermResult.result, 0)\n}\n\n/************* CHAT MESSAGE *************/\nfunction formResult (input, output) {\n  return `<tr><td style='text-align:left'><b>${input}: </b></td><td>${output}</td></tr>`\n}\nfunction postCharToChat (actorData, items) {\n  const statInsert = formResult(game.i18n.localize('CAIRN.Strength'), actorData.abilities.STR.max) +\n    formResult(game.i18n.localize('CAIRN.Dexterity'), actorData.abilities.DEX.max) +\n    formResult(game.i18n.localize('CAIRN.Will'), actorData.abilities.WIL.max) + '</table><table>' +\n    formResult(game.i18n.localize('CAIRN.HitProtection'), actorData.hp.max) +\n    formResult(game.i18n.localize('CAIRN.Gold'), actorData.gold) + '</table>'\n\n  const statsMessage = `<table>${statInsert}</table>`\n  const gearMessage = `<table><strong>${game.i18n.localize('CAIRN.Items')}</strong> : ${items.map(i => i.system.quantity > 1 ? `${i.system.quantity} ${i.name}` : i.name).join(', ')}</table>`\n  const bioMessage = actorData.biography\n\n  const charInsert = '@Actor[' + actorData.name + ']'\n\n  const chatData = {\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker(),\n    content: `<h2>${charInsert}</h2>` + statsMessage + gearMessage + bioMessage\n  }\n  ChatMessage.create(chatData, {})\n}\n\n/**\n * Create the new actor\n * @returns {Promise<void>}\n * @constructor\n */\nasync function Create () {\n  // attributes\n  const allroll = await new Roll('3d6[bloodmoon]+3d6[cold]+3d6[force]').roll({ async: true })\n  const strength = totalDiceTermResults(allroll.dice[0].results)\n  const dexterity = totalDiceTermResults(allroll.dice[1].results)\n  const will = totalDiceTermResults(allroll.dice[2].results)\n\n  // other stats\n  const hp = new Roll('1d6').roll({ async: false }).total\n  const gold = new Roll('3d6').roll({ async: false }).total\n  const age = new Roll('2d10+10').roll({ async: false }).total\n\n  // name\n  const genderTable = Math.random() < 0.5 ? 'Male Names' : 'Female Names'\n  const firstName = await getCompendiumTableAndRoll('cairn.character-traits', genderTable).then(e => e[0].text)\n\n  const surname = await getCompendiumTableAndRoll('cairn.character-traits', 'Surnames').then(e => e[0].text)\n  const characterName = firstName + ' ' + surname\n\n  // biography\n  const face = await getCompendiumTableAndRoll('cairn.character-traits', 'Face').then(e => e[0].text)\n  const hair = await getCompendiumTableAndRoll('cairn.character-traits', 'Hair').then(e => e[0].text)\n  const skin = await getCompendiumTableAndRoll('cairn.character-traits', 'Skin').then(e => e[0].text)\n  const physique = await getCompendiumTableAndRoll('cairn.character-traits', 'Physique').then(e => e[0].text)\n  const misfortune = await getCompendiumTableAndRoll('cairn.character-traits', 'Misfortunes').then(e => e[0].text)\n  const reputation = await getCompendiumTableAndRoll('cairn.character-traits', 'Reputation').then(e => e[0].text)\n  const speech = await getCompendiumTableAndRoll('cairn.character-traits', 'Speech').then(e => e[0].text)\n  const vice = await getCompendiumTableAndRoll('cairn.character-traits', 'Vice').then(e => e[0].text)\n  const virtue = await getCompendiumTableAndRoll('cairn.character-traits', 'Virtue').then(e => e[0].text)\n  const clothing = await getCompendiumTableAndRoll('cairn.character-traits', 'Clothing').then(e => e[0].text)\n  const characterBackground = await getCompendiumTableAndRoll('cairn.character-traits', 'Background').then(e => e[0].text)\n  const biography = game.i18n.format('CAIRN.CharacterGeneratorBiography', {\n    physique: physique,\n    skin: skin,\n    hair: hair,\n    face: face,\n    speech: speech,\n    clothing: clothing,\n    vice: vice,\n    virtue: virtue,\n    reputation: reputation,\n    misfortune: misfortune,\n    age: age\n  })\n\n  // Building actordata\n  const actorData = {\n    name: characterName,\n    background: characterBackground,\n    biography: biography,\n    hp: { value: hp, max: hp },\n    gold: gold,\n    abilities: {\n      STR: {\n        value: strength,\n        max: strength\n      },\n      DEX: {\n        value: dexterity,\n        max: dexterity\n      },\n      WIL: {\n        value: will,\n        max: will\n      }\n    }\n  }\n\n  // Getting items\n  let items = []\n\n  let rations = await findCompendiumDocument(['cairn.expeditionary-gear'], 'Rations')\n  rations = rations.toObject()\n  rations.system.quantity = 3\n  items.push(rations)\n\n  const torch = await findCompendiumDocument(['cairn.expeditionary-gear'], 'Torch')\n  items.push(torch.toObject())\n  // Roll inventory\n  const rolledResults = await rollInventory(rollTableInventory, actorData)\n  items = items.concat(rolledResults.items)\n  const actors = rolledResults.actors\n\n  for (const actor of actors) {\n    await Actor.create(actor)\n  }\n\n  const actor = Actor.create({\n    name: characterName,\n    type: 'character',\n    img: 'icons/svg/mystery-man.svg',\n    sort: 12000,\n    data: actorData,\n    token: {},\n    flags: {}\n  }).then(function (actor) {\n    actor.createEmbeddedDocuments('Item', items)\n\n    if (game.dice3d) {\n      game.dice3d.showForRoll(allroll).then(happened => {\n        postCharToChat(actorData, items)\n      })\n    } else {\n      postCharToChat(actorData, items)\n    }\n  })\n}\n\n\nCreate()","flags":{"core":{"sourceId":"Macro.3zRg0cgONbT8eqmY"}},"ownership":{"default":0,"tw8WBuj1heybSIqW":3,"14a9d04NamzRMVz3":3,"ZTTE7wBZkO9sADJG":3,"Vw4BPOEKqYJ80wk3":3},"_stats":{"systemId":"cairn","systemVersion":"0.11.0","coreVersion":"10.286","createdTime":1664606276186,"modifiedTime":1665224573538,"lastModifiedBy":"Vw4BPOEKqYJ80wk3"},"folder":null,"sort":0,"_id":"JwsurLrvYEluF1tV"}
